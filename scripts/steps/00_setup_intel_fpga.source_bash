expected_source_script=00_setup.source_bash

if [ -z "$BASH_SOURCE" ]
then
    printf "script \"%s\" should be sourced from \"%s\"\n"  \
        "$0" "$expected_source_script" 1>&2

    exit 1
fi

this_script=$(basename "${BASH_SOURCE[0]}")
source_script=$(basename "${BASH_SOURCE[1]}")

if [ -z "$source_script" ]
then
    printf "script \"%s\" should be sourced from  \"%s\"\n"  \
        "$this_script" "$expected_source_script" 1>&2

    return 1
fi

if [ "$source_script" != $expected_source_script ]
then
    printf "script \"%s\" should be sourced from  \"%s\", not \"%s\"\n"  \
        "$this_script" "$expected_source_script" "$source_script" 1>&2

    exit 1
fi

#-----------------------------------------------------------------------------
#
#   Intel FPGA Quartus, formerly from Altera
#
#-----------------------------------------------------------------------------

intel_fpga_info_where_quartus_is_found ()
{
    # info "Found Quartus$1:"
    # info "QUARTUS_ROOTDIR=$QUARTUS_ROOTDIR"
    # info "PATH=$PATH"
    # info "quartus_full_real_path=$quartus_full_real_path"

    printf "%s\n" "$script: Found Quartus$1:"
    printf "%s\n" "QUARTUS_ROOTDIR=$QUARTUS_ROOTDIR"
    printf "%s\n" "PATH=$PATH"
    printf "%s\n" "quartus_full_real_path=$quartus_full_real_path"

                [ -d "$QUARTUS_ROOTDIR" ] ||
    error "directory '$QUARTUS_ROOTDIR' expected"

                [ -d "$QUARTUS_ROOTDIR/$quartus_bin_dir" ]  ||
    error "directory '$QUARTUS_ROOTDIR/$quartus_bin_dir' expected"

                      [ -f "$quartus_full_real_path" ] &&
                      [ -x "$quartus_full_real_path" ] ||
    error "executable file '$quartus_full_real_path' expected"

                      [ -f "$quartus_sh_full_real_path" ] &&
                      [ -x "$quartus_sh_full_real_path" ] ||
    error "executable file '$quartus_sh_full_real_path' expected"

                      [ -f "$quartus_pgm_full_real_path" ] &&
                      [ -x "$quartus_pgm_full_real_path" ] ||
    error "executable file '$quartus_pgm_full_real_path' expected"
}

#-----------------------------------------------------------------------------

intel_fpga_try_install_dir ()
{
    local dir="$1"

    [ -z "${intelfpga_install_dir-}" ] && [ -n "${dir-}" ] || return 0

    if [ $use_old_version_of_quartus = 1 ]
    then
        if [ -z "${intelfpga_install_dir-}" ] &&
           [ -d "$dir/altera" ]
        then
            intelfpga_install_dir=altera
        fi
    else
        if [ -d "$dir/intelFPGA_lite" ]
        then
            intelfpga_install_dir=intelFPGA_lite

        elif [ -d "$dir/intelFPGA" ]
        then
            intelfpga_install_dir=intelFPGA
        fi
    fi

    if [ -n "${intelfpga_install_dir-}" ] ; then
        intelfpga_install_parent_dir="$dir"
    fi

    if [ $use_old_version_of_quartus = 1 ]
    then
        attempt_intelfpga_install_dirs="'altera'"
    else
        attempt_intelfpga_install_dirs="'intelFPGA_lite' or 'intelFPGA' or 'altera'"
    fi

    attempt_intelfpga_install_parent_dirs="${attempt_intelfpga_install_parent_dirs:+$attempt_intelfpga_install_parent_dirs or }'$dir'"
}

#-----------------------------------------------------------------------------

intel_fpga_setup_quartus ()
{
       [ "$OSTYPE" = "linux-gnu" ]  \
    || [ "$OSTYPE" = "cygwin"    ]  \
    || [ "$OSTYPE" = "msys"      ]  \
    || return

    #-------------------------------------------------------------------------

    # Workarounds for Quartus library problems
    # that are uncovered under RED OS from https://www.red-soft.ru

    if      [ "${inside_run_dir-}" = 1    ]  \
       && ! [ -f /usr/lib64/libcrypt.so.1 ]  \
       &&   [ -f /usr/lib64/libcrypt.so   ]
    then
        ln -sf /usr/lib64/libcrypt.so libcrypt.so.1
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$PWD"
    fi

    #-------------------------------------------------------------------------

    if [ "$OSTYPE" = "linux-gnu" ]
    then
        quartus_bin_dir=bin

    elif  [ "$OSTYPE" = "cygwin"    ]  \
       || [ "$OSTYPE" = "msys"      ]
    then
        if [ $use_old_version_of_quartus = 1 ] ; then
            quartus_bin_dir=bin
        else
            quartus_bin_dir=bin64
        fi
    fi

    #-------------------------------------------------------------------------

    if    [ -n "${QUARTUS_ROOTDIR-}"                   ]  \
       && [ -d "$QUARTUS_ROOTDIR"                      ]  \
       && [ -d "$QUARTUS_ROOTDIR/$quartus_bin_dir"     ]  \
       && [ $(basename "$QUARTUS_ROOTDIR") = "quartus" ]
    then
        choosen_version_dir=$(dirname "$QUARTUS_ROOTDIR")
        export PATH="${PATH:+$PATH:}$QUARTUS_ROOTDIR/$quartus_bin_dir"

        quartus_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus$exe"
        quartus_sh_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus_sh$exe"
        quartus_pgm_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus_pgm$exe"

        intel_fpga_info_where_quartus_is_found " using QUARTUS_ROOTDIR"
        return
    fi

    #-------------------------------------------------------------------------

    if is_command_available quartus$exe
    then
        quartus_full_real_path=$(readlink -f "$(command -v quartus$exe)")

        if [ "$(basename           $(dirname "$quartus_full_real_path"))"  = $quartus_bin_dir ] &&
           [ "$(basename $(dirname $(dirname "$quartus_full_real_path")))" = quartus          ]
        then
            export QUARTUS_ROOTDIR=$(dirname $(dirname "$quartus_full_real_path"))
            choosen_version_dir=$(dirname "$QUARTUS_ROOTDIR")

            quartus_sh_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus_sh$exe"
            quartus_pgm_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus_pgm$exe"

            intel_fpga_info_where_quartus_is_found " using PATH"
            return
        else
            warning "quartus is in the path outside the usual installation directory"
        fi
    fi

    #-------------------------------------------------------------------------

    if [ $use_old_version_of_quartus = 0 ] ; then
        intel_fpga_try_install_dir "${INTEL_FPGA_HOME-}"
    fi

    intel_fpga_try_install_dir "${ALTERA_HOME-}"
    intel_fpga_try_install_dir "${QUARTUS_HOME-}"

    #-------------------------------------------------------------------------

    if    [ "$OSTYPE" = "linux-gnu" ]
    then
        intel_fpga_try_install_dir "$HOME"
        intel_fpga_try_install_dir /opt
        intel_fpga_try_install_dir /tools

    elif  [ "$OSTYPE" = "cygwin"    ]  \
       || [ "$OSTYPE" = "msys"      ]
    then
        intel_fpga_try_install_dir /c
        intel_fpga_try_install_dir /d
        intel_fpga_try_install_dir /e
    fi

    #-------------------------------------------------------------------------

    if [ -z "${intelfpga_install_parent_dir-}" ]
    then
        error "expected to find $attempt_intelfpga_install_dirs"             \
              "in ${attempt_intelfpga_install_parent_dirs}."                 \
              "The Quartus installation home location"                       \
              " can be set by one of the following environment variables:"   \
              " INTELFPGA_HOME or ALTERA_HOME or QUARTUS_HOME."              \
              " You can also use QUARTUS_ROOTDIR"                            \
              " to specify the version subtree location."
    fi

    #-------------------------------------------------------------------------

    find_dir="$intelfpga_install_parent_dir/$intelfpga_install_dir"
    find_opt="-mindepth 1 -maxdepth 1 -type d -print"

    choosen_version_dir=$($find_to_run "$find_dir" $find_opt | sort | tail -1)

    if [ -z "$choosen_version_dir" ]
    then
        error "cannot find any version of Intel FPGA installed in "     \
              "'$intelfpga_install_parent_dir/$intelfpga_install_dir'"
    fi

    #-------------------------------------------------------------------------

    export QUARTUS_ROOTDIR="$choosen_version_dir/quartus"
    export PATH="${PATH:+$PATH:}$QUARTUS_ROOTDIR/$quartus_bin_dir"

    quartus_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus$exe"
    quartus_sh_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus_sh$exe"
    quartus_pgm_full_real_path="$QUARTUS_ROOTDIR/$quartus_bin_dir/quartus_pgm$exe"

    #-------------------------------------------------------------------------

    all_version_dirs=$($find_to_run "$find_dir" $find_opt | xargs echo)

    if [ "$choosen_version_dir" != "$all_version_dirs" ]
    then
        warning "multiple Intel FPGA versions installed in"                \
                "'$intelfpga_install_parent_dir/$intelfpga_install_dir':"  \
                "'$all_version_dirs'"
    fi

    intel_fpga_info_where_quartus_is_found " in one of the standard locations"
}

#-----------------------------------------------------------------------------
#
#   Intel FPGA version of Questa by Siemens EDA (former Mentor Graphics)
#
#-----------------------------------------------------------------------------

intel_fpga_setup_questa ()
{
       [ "$OSTYPE" = "linux-gnu" ]  \
    || [ "$OSTYPE" = "cygwin"    ]  \
    || [ "$OSTYPE" = "msys"      ]  \
    || return

    if is_command_available vsim$exe
    then
        vsim_command="vsim$exe"
        vcover_command="vcover$exe"

        return  # Already set up
    fi

    [ -n "${choosen_version_dir-}" ] ||
        error "Intel FPGA Quartus was supposed to be setup first. "  \
              "Probably internal error."

    #-------------------------------------------------------------------------

    questa_dir=questa_fse

    if [ "$OSTYPE" = "linux-gnu" ]
    then
        questa_bin_dir=bin
        questa_lib_dir=linux_x86_64

    elif  [ "$OSTYPE" = "cygwin"    ]  \
       || [ "$OSTYPE" = "msys"      ]
    then
        questa_bin_dir=win64
        questa_lib_dir=win64
    else
        error "this script does not support your OS / platform '$OSTYPE'"
    fi

    #-------------------------------------------------------------------------

    default_lm_license_file="$HOME/flexlm/license.dat"

    if [ -f "$default_lm_license_file" ]
    then
        if [ -z "${LM_LICENSE_FILE-}" ] ; then
            export LM_LICENSE_FILE="$default_lm_license_file"
        fi

        if [ -z "${MGLS_LICENSE_FILE-}" ] ; then
            export MGLS_LICENSE_FILE="$default_lm_license_file"
        fi
    fi

    #-------------------------------------------------------------------------

    # Check if Quartus is installed without Questa
    [ -d "$choosen_version_dir/$questa_dir" ] || return 0

    export PATH="${PATH:+$PATH:}$choosen_version_dir/$questa_dir/$questa_bin_dir"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$choosen_version_dir/$questa_dir/$questa_lib_dir"

    vsim_command="$choosen_version_dir/$questa_dir/$questa_bin_dir/vsim$exe"
    vcover_command="$choosen_version_dir/$questa_dir/$questa_bin_dir/vcover$exe"

    #-------------------------------------------------------------------------

                [ -d "$choosen_version_dir/$questa_dir/$questa_bin_dir" ] ||
    error "directory '$choosen_version_dir/$questa_dir/$questa_bin_dir' expected"

                      [ -f "$vsim_command" ] ||
    error "executable file '$vsim_command' expected"

                      [ -f "$vcover_command" ] ||
    error "executable file '$vcover_command' expected"

    #          [ -x "$vsim_command" ] ||
    # warning "file '$vsim_command' is not executable."  \
    #         "Questa is installed with incorrect permissions?"

    #          [ -x "$vcover_command" ] ||
    # warning "file '$vcover_command' is not executable."  \
    #         "Questa is installed with incorrect permissions?"
}

#-----------------------------------------------------------------------------

questa_script=../questa.tcl
[ "$OSTYPE" = "linux-gnu" ] && [ "$USER" = panchul ] && questa_script=../questa2.tcl

run_questa ()
{
    error_prefix="This example is supposed to be run with Questa simulator. However,"

       [ "$OSTYPE" = "linux-gnu" ]  \
    || [ "$OSTYPE" = "cygwin"    ]  \
    || [ "$OSTYPE" = "msys"      ]  \
    || error "$error_prefix this simulator does not run under OS / platform '$OSTYPE'"

    if [ -z "${LM_LICENSE_FILE-}" ] && ! [ -f "$MGLS_LICENSE_FILE" ]
    then
        warning "$error_prefix your variable LM_LICENSE_FILE is not set"  \
                "and the default license file '$MGLS_LICENSE_FILE'"       \
                "does not exist."                                         \
                "You may need to resolve the licensing issues."
    fi

    if ! is_command_available "$vsim_command"
    then
        error "$error_prefix '$vsim_command' executable is not available."  \
              "Have you installed the simulator, either"                    \
              "together with Quartus package or separately?"
    fi

    if grep 'add wave' $questa_script ; then
        vsim_options=-gui
    else
        vsim_options=-c
    fi

    "$vsim_command" $vsim_options -do $questa_script 2>&1
    cp transcript "$log"

    if [ -f coverage.ucdb ] ; then
        "$vcover_command" report -details -html coverage.ucdb
    fi
}

#-----------------------------------------------------------------------------
#
#   Intel FPGA boards
#
#-----------------------------------------------------------------------------

setup_run_directory_for_fpga_synthesis_quartus ()
{
    dir="$1"
    main_src_dir="$2"

    #-------------------------------------------------------------------------

    # We need relative paths here because Quartus under Windows
    # does not like /c/... full paths.

    # We don't need quotation marks around relative paths
    # because these particular relative paths
    # are expected to contain only alnums, underscores and slashes.

    rel_main_src_dir=$(realpath   --relative-to="$dir" "$main_src_dir")
    rel_board_dir=$(realpath      --relative-to="$dir" "$board_dir")
    rel_peripheral_dir=$(realpath --relative-to="$dir" "$peripheral_dir")
    rel_lab_dir=$(realpath        --relative-to="$dir" "$lab_dir")

    #-------------------------------------------------------------------------

    > "$dir/fpga_project.qpf"

    cat << EOF > "$dir/fpga_project.qsf"
set_global_assignment -name NUM_PARALLEL_PROCESSORS  4
set_global_assignment -name TOP_LEVEL_ENTITY         board_specific_top
set_global_assignment -name SDC_FILE                 $rel_board_dir/$fpga_board/board_specific.sdc

set_global_assignment -name SEARCH_PATH $rel_main_src_dir
set_global_assignment -name SEARCH_PATH $rel_board_dir/$fpga_board
set_global_assignment -name SEARCH_PATH $rel_peripheral_dir
set_global_assignment -name SEARCH_PATH $rel_lab_dir/common

EOF

    $find_to_run  \
        "$main_src_dir" "$board_dir/$fpga_board" "$peripheral_dir" "$lab_dir/common"  \
        -type f -name '*.sv' -not -name tb.sv  \
        -printf "set_global_assignment -name SYSTEMVERILOG_FILE %f\n"  \
        >> "$dir/fpga_project.qsf"

    if [ -f "$main_src_dir/extra_project_files.qsf" ] ; then
        cat "$main_src_dir/extra_project_files.qsf" >> "$dir/fpga_project.qsf"
    fi

    cat "$board_dir/$fpga_board/board_specific.qsf" >> "$dir/fpga_project.qsf"

    $find_to_run "$board_dir/$fpga_board"  \
                 -name '*.qsf'             \
               ! -name board_specific.qsf  \
                 -exec cp {} "$dir"        \;
}

#-----------------------------------------------------------------------------
#
#   Synthesis and configuration
#
#-----------------------------------------------------------------------------

synthesize_for_fpga_quartus ()
{
    is_command_available_or_error "$quartus_sh_full_real_path" " from Intel FPGA Quartus Prime package"

    if ! "$quartus_sh_full_real_path" --no_banner --flow compile fpga_project |& tee -a "$log"
    then
        grep -i -A 5 error "$log" 2>&1
        error "synthesis failed"
    fi
}

#-----------------------------------------------------------------------------

# Need to put detailed dump to debug MEI situation

configure_fpga_quartus ()
{
    is_command_available_or_error "$quartus_pgm_full_real_path" " from Intel FPGA Quartus Prime package"

    #-------------------------------------------------------------------------

    if [ "$OSTYPE" = "linux-gnu" ]
    then
        rules_dir=/etc/udev/rules.d
        rules_file="$script_dir/fpga/90-intel-fpga.rules"

        if ! grep -q USB-Blaster $rules_dir/*
        then
            error "No rules for USB Blaster detected in $rules_dir."  \
                  "Please put it there and reboot: sudo cp $rules_file $rules_dir"
        fi

        killall jtagd 2>/dev/null || true
    fi

    #-------------------------------------------------------------------------

    "$quartus_pgm_full_real_path" -l &> cable_list

    cable_name_1=$(set +o pipefail; grep "1) " cable_list | sed 's/.*1) //')
    cable_name_2=$(set +o pipefail; grep "2) " cable_list | sed 's/.*2) //')

    if [ -n "$cable_name_1" ]
    then
        if [ -n "$cable_name_2" ]
        then
            warning "more than one cable is connected:" \
                    "$cable_name_1 and $cable_name_2"
        fi

        info "using cable $cable_name_1"

        config_file_1=fpga_project.sof
        config_file_2=fpga_project.pof

        config_file=$config_file_1

        if ! [ -f $config_file ]
        then
            config_file=$config_file_2

            if ! [ -f $config_file ]
            then
                error "Neither $config_file_1 nor $config_file_2" \
                    "config file is available"
            fi
        fi

        # Cyclone V SE/SX/ST is an SOC with an ARM processor.
        # ARM is the first at the jtag and FPGA is the second.
        # Need for a special quartus_pgm call.

        # Get the device name from qsf file

        device_str=$(grep DEVICE "$board_dir/$fpga_board/board_specific.qsf")
        device_name=none

        for word in $device_str
        do
            if [[ $word =~ 5C ]]
            then
                device_name=${word:0:4}
                break
            fi
        done

        # Check the device name

        if [ $device_name = 5CSE ] || [ $device_name = 5CSX ] || [ $device_name = 5CST ]
        then
            "$quartus_pgm_full_real_path" --no_banner -c "$cable_name_1" --mode=jtag -o "P;$config_file@2"
        else
            "$quartus_pgm_full_real_path" --no_banner -c "$cable_name_1" --mode=jtag -o "P;$config_file"
        fi
    else
        error "cannot detect a USB-Blaster cable connected"  \
              "for $fpga_board FPGA board"
    fi

    rm -f cable_list
}

#-----------------------------------------------------------------------------

run_fpga_synthesis_gui_quartus ()
{
    is_command_available_or_error "$quartus_full_real_path" " from Intel FPGA Quartus Prime package"

    setup_run_directory_for_fpga_synthesis

    "$quartus_full_real_path" fpga_project.qpf &
}
